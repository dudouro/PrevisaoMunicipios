import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import os
import numpy as np
import plotly.express as px
from extra import variaveis, mesoregiao

def criar_grafico_distribuicao(df, variavel, titulo, ano_selecionado, a):
    df_A = df[df[f'y_{a}'] == 'A']
    df_B = df[df[f'y_{a}'] == 'B']

    # Definir bins comuns
    min_val = min(df_A[variavel].min(), df_B[variavel].min())
    max_val = max(df_A[variavel].max(), df_B[variavel].max())
    bins = np.linspace(min_val, max_val, 20)  # 20 bins comuns

    hist_A, _ = np.histogram(df_A[variavel], bins=bins, density=True)
    hist_B, _ = np.histogram(df_B[variavel], bins=bins, density=True)

    # Ajuste da posi√ß√£o dos bins para exibi√ß√£o
    bin_centers = (bins[:-1] + bins[1:]) / 2  

    fig = go.Figure()
    
    fig.add_trace(go.Bar(x=bin_centers, y=hist_A, marker_color='blue', name='Situa√ß√£o A', opacity=0.75))
    fig.add_trace(go.Bar(x=bin_centers, y=-hist_B, marker_color='red', name='Situa√ß√£o B', opacity=0.75))

    fig.update_layout(
        title=f"{titulo} - 20{ano_selecionado} - {a}",
        xaxis_title=variavel,
        yaxis_title="Densidade",
        barmode='overlay',
        bargap=0,
        showlegend=True
    )

    st.plotly_chart(fig)


# Criando a interface Streamlit
st.title("An√°lise Financeira por Ano dos Municipios")

anos = [17, 18, 19, 20, 21, 22]

st.subheader("Distribui√ß√£o dos Municipios por Vari√°vel")

# Sele√ß√£o do ano
ano_selecionado = st.selectbox("Selecione o ano da previs√£o:", anos)

# Sele√ß√£o da vari√°vel para an√°lise
variavel_selecionada = st.selectbox("Selecione a vari√°vel para comparar:", variaveis)

# Caminho do arquivo
file_path = os.path.join("resultados", "janela_fixa", str(ano_selecionado), f"resultado_final{ano_selecionado}.xlsx")

# Verificando se o arquivo existe
if os.path.exists(file_path):
    # Ler arquivo Excel
    df = pd.read_excel(file_path)

    # Escolher a fun√ß√£o de acordo com a op√ß√£o selecionada
    criar_grafico_distribuicao(df, variavel_selecionada, f"Distribui√ß√£o do {variavel_selecionada}", ano_selecionado, 'previsto')

else:
    st.error(f"Arquivo n√£o encontrado: {file_path}")

from extra import mesoregiao, variaveis  
import streamlit as st
import pandas as pd
import os
import plotly.graph_objects as go

st.subheader("Vari√°veis por Anos")

df_meso = mesoregiao()

municipios_selecionados = st.multiselect("Selecione os munic√≠pios:", df_meso["Munic√≠pios"].unique())

if municipios_selecionados:
    dados_municipios = []

    for ano in anos:
        file_path = os.path.join("resultados", "janela_fixa", str(ano), f"resultado_final{ano}.xlsx")

        if os.path.exists(file_path):
            df = pd.read_excel(file_path)

            df = df[df["id"].astype(str).isin(df_meso[df_meso["Munic√≠pios"].isin(municipios_selecionados)]["id"].astype(str))]

            if not df.empty:
                df["ano"] = f"20{ano}"
                dados_municipios.append(df)

    if dados_municipios:
        df_final = pd.concat(dados_municipios)

        variavel_selecionada = st.selectbox("Selecione a vari√°vel para comparar:", df_final.columns)
        
        fig = go.Figure()

        for municipio in municipios_selecionados:
            df_municipio = df_final[df_final["id"].astype(str).isin(df_meso[df_meso["Munic√≠pios"] == municipio]["id"].astype(str))]

            fig.add_trace(go.Scatter(
                x=df_municipio["ano"], 
                y=df_municipio[variavel_selecionada], 
                mode='lines+markers', 
                name=municipio
            ))

        fig.update_layout(title="Evolu√ß√£o dos Munic√≠pios ao Longo dos Anos",
                          xaxis_title="Ano",
                          yaxis_title=variavel_selecionada)

        st.plotly_chart(fig)

    else:
        st.warning("Nenhum dado dispon√≠vel para os munic√≠pios selecionados.")

if municipios_selecionados:
    previsao_df = pd.DataFrame(index=municipios_selecionados, columns=[f"20{ano}" for ano in anos])

    for municipio in municipios_selecionados:
        for ano in anos:
            file_path = os.path.join("resultados", "janela_fixa", str(ano), f"resultado_final{ano}.xlsx")

            if os.path.exists(file_path):
                df = pd.read_excel(file_path)

                df_municipio = df[df["id"].astype(str).isin(df_meso[df_meso["Munic√≠pios"] == municipio]["id"].astype(str))]

                if not df_municipio.empty and 'y_previsto' in df_municipio.columns and 'y_real' in df_municipio.columns:
                    y_previsto = df_municipio['y_previsto'].iloc[0]
                    y_real = df_municipio['y_real'].iloc[0]

                    if y_previsto in ['A', 'B']:
                        emoji = "üü¢" if y_previsto == y_real else "üî¥"
                        previsao_df.loc[municipio, f"20{ano}"] = f"{y_previsto} ({emoji})"
                    else:
                        previsao_df.loc[municipio, f"20{ano}"] = 'Nulo'
                else:
                    previsao_df.loc[municipio, f"20{ano}"] = 'Nulo'

    st.write("Tabela de Previs√µes A e B ao Longo dos Anos")
    st.dataframe(previsao_df)
else:
    st.warning("Nenhum munic√≠pio selecionado.")


# Obtendo lista de munic√≠pios e IDs
df_meso = mesoregiao()

st.subheader("Assertividade por Mesorregi√£o")

# Op√ß√£o de selecionar todas as mesorregi√µes
opcoes_mesorregioes = df_meso["Mesorregi√£o"].unique()
selecionar_todas = st.checkbox("Selecionar todas as mesorregi√µes")

if selecionar_todas:
    mesoregiao_selecionadas = list(opcoes_mesorregioes)  # Converter para lista
else:
    mesoregiao_selecionadas = st.multiselect("Selecione as mesorregi√µes para compara√ß√£o:", opcoes_mesorregioes)

# Lista para armazenar os dados de assertividade
assertividade_data = []

# üîπ Corre√ß√£o do erro: Verificar se h√° pelo menos uma mesorregi√£o selecionada
if len(mesoregiao_selecionadas) > 0:
    for ano in anos:
        file_path = os.path.join("resultados", "janela_fixa", str(ano), f"resultado_final{ano}.xlsx")

        if os.path.exists(file_path):
            df = pd.read_excel(file_path)

            # Calcular a assertividade geral por mesorregi√£o
            df["acerto"] = df["y_real"] == df["y_previsto"]
            
            # Agrupar os acertos por v21 (mesorregi√£o) e calcular a m√©dia
            assertividade_mesorregiao = df.groupby("v21")["acerto"].mean() * 100
            
            # Resetar √≠ndice para juntar com df_meso
            assertividade_mesorregiao = assertividade_mesorregiao.reset_index()
            
            # Adicionar dados do ano
            assertividade_mesorregiao["Ano"] = f"20{ano}"

            # Merge com o dataframe de mesorregi√£o para obter o nome da mesorregi√£o
            assertividade_mesorregiao = assertividade_mesorregiao.merge(df_meso[["v21", "Mesorregi√£o"]], on="v21", how="left")

            # Filtrar as mesorregi√µes selecionadas
            assertividade_mesorregiao = assertividade_mesorregiao[assertividade_mesorregiao["Mesorregi√£o"].isin(mesoregiao_selecionadas)]

            # Adicionar ao resultado
            assertividade_data.append(assertividade_mesorregiao)

    if assertividade_data:
        # Concatenar os dados de assertividade de todos os anos
        assertividade_df = pd.concat(assertividade_data)

        # Selecionar as colunas necess√°rias
        assertividade_df = assertividade_df[["Mesorregi√£o", "Ano", "acerto"]]
        assertividade_df.columns = ["Mesorregi√£o", "Ano", "Acerto (%)"]

        # Plotar gr√°fico de assertividade por mesorregi√£o
        fig = px.line(assertividade_df, x="Ano", y="Acerto (%)", color="Mesorregi√£o", 
                      labels={"Acerto (%)": "Assertividade (%)", "Mesorregi√£o": "Mesorregi√£o"},
                      title="Assertividade do Modelo por Mesorregi√£o ao Longo dos Anos")

        fig.update_layout(xaxis_title="Ano", yaxis_title="Assertividade (%)", title_x=0.5)
        st.plotly_chart(fig)

    else:
        st.warning("Nenhuma assertividade dispon√≠vel para as mesorregi√µes selecionadas.")
else:
    st.warning("Selecione pelo menos uma mesorregi√£o para compara√ß√£o.")
