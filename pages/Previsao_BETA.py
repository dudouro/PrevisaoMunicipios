from extra import variaveis
import streamlit as st
import numpy as np
import pandas as pd
import joblib
import os

# Configura√ß√µes iniciais
st.set_page_config(page_title="Previs√£o CAPAG+LRF", page_icon="üìä", layout="wide")

# Constantes
PASTA_DADOS = "resultados"
NOME_MODELO = "random_forest_saude_municipios.pkl"

# Dicion√°rio de descri√ß√µes para as vari√°veis (substitua com suas descri√ß√µes reais)
DESCRICOES_VARIAVEIS = {
    "receita_total": "Receita total do munic√≠pio no per√≠odo",
    "receita_propria": "Receita gerada pelo pr√≥prio munic√≠pio",
    "receita_transferencias": "Transfer√™ncias de outros entes",
    "populacao": "Popula√ß√£o residente no munic√≠pio",
    "receita_corrente_liquida": "Receita corrente l√≠quida (RCL)",
    "despesa_total": "Total de despesas do munic√≠pio",
    "despesa_com_pessoal": "Despesas com folha de pagamento",
    "gastos_operacionais": "Custos operacionais do munic√≠pio",
    "disponibilidade_caixa": "Disponibilidades financeiras",
    "ativo_circulante": "Ativos de curto prazo",
    "obrigacoes_curto_prazo": "Passivos de curto prazo",
    "divida_consolidada": "D√≠vida consolidada do munic√≠pio",
    "operacoes_credito": "Opera√ß√µes de cr√©dito realizadas"
}

# Fun√ß√µes auxiliares
def carregar_dados_2022():
    """Carrega os dados de refer√™ncia de 2022"""
    try:
        caminho = os.path.join(PASTA_DADOS, "janela_fixa", "22", "resultado_final22.xlsx")
        df = pd.read_excel(caminho)
        
        # Converter colunas num√©ricas que podem estar como strings
        for col in df.columns:
            if df[col].dtype == object:
                try:
                    df[col] = pd.to_numeric(df[col])
                except ValueError:
                    pass  # Mant√©m como string se n√£o for convers√≠vel
                    
        return df
    except Exception as e:
        st.error(f"Erro ao carregar dados hist√≥ricos: {str(e)}")
        return None

def carregar_modelo():
    """Carrega o modelo treinado"""
    try:
        return joblib.load(os.path.join(NOME_MODELO))
    except Exception as e:
        st.error(f"Erro ao carregar o modelo: {str(e)}")
        return None

def formatar_numero(valor, prefixo='R$'):
    """Formata valores num√©ricos para exibi√ß√£o"""
    if pd.isna(valor) or valor == 0:
        return "-"
    return f"{prefixo} {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def fazer_previsao(modelo, indicadores):
    """Prepara os dados e faz a previs√£o garantindo a ordem correta das features"""
    # Mapeamento de nomes alternativos
    mapeamento_nomes = {
        "Despesa com pessoal": "despesa_com_pessoal",
        "D√≠vida Consolidada": "divida_consolidada",
        "Opera√ß√µes de cr√©dito": "operacoes_credito"
    }
    
    # Cria um DataFrame com as colunas na ordem esperada pelo modelo
    try:
        # Primeiro verifica quais features o modelo espera
        features_esperadas = modelo.feature_names_in_
        
        # Cria um dicion√°rio com os valores na ordem correta
        dados_previsao = {}
        for feature in features_esperadas:
            # Verifica se o nome existe no mapeamento ou nos indicadores
            if feature in indicadores:
                dados_previsao[feature] = [indicadores[feature]]
            elif feature in mapeamento_nomes.values():
                # Encontra a chave original no mapeamento
                for original, padronizado in mapeamento_nomes.items():
                    if padronizado == feature and original in indicadores:
                        dados_previsao[feature] = [indicadores[original]]
                        break
        
        # Cria o DataFrame garantindo a ordem das colunas
        df_previsao = pd.DataFrame(dados_previsao, columns=features_esperadas)
        
        return modelo.predict(df_previsao)
    except Exception as e:
        st.error(f"Erro ao preparar dados para previs√£o: {str(e)}")
        return None
    
# Interface principal
def main():
    # Carregar dados de refer√™ncia
    df_referencia = carregar_dados_2022()
    if df_referencia is None:
        st.stop()

    # Cabe√ßalho
    st.title("üèõ Previs√£o CAPAG+LRF - An√°lise Financeira Municipal")
    st.markdown("""
    **Vers√£o BETA**  
    Simule diferentes cen√°rios financeiros utilizando nosso modelo preditivo.
    """)

    # Divis√£o das colunas
    col1, col2 = st.columns([1, 2])

    with col1:
        # Se√ß√£o de inputs
        with st.container(border=True):
            st.markdown("### üí∞ Informe os valores cont√°beis")
            grupos = {
                "üìà Receitas": [
                    "receita_total", "receita_propria",
                    "receita_transferencias", "populacao",
                    "receita_corrente_liquida"
                ],
                "üìâ Despesas": [
                    "despesa_total", "despesa_com_pessoal",
                    "gastos_operacionais"
                ],
                "üíº Ativos": [
                    "disponibilidade_caixa", "ativo_circulante"
                ],
                "üìã Passivos": [
                    "obrigacoes_curto_prazo", "divida_consolidada",
                    "operacoes_credito"
                ]
            }

            dados = {}
            for grupo, variaveis in grupos.items():
                with st.expander(grupo):
                    for var in variaveis:
                        label = var.replace("_", " ").title()
                        help_text = DESCRICOES_VARIAVEIS.get(var, "Informe o valor desta conta cont√°bil")
                        dados[var] = st.number_input(
                            label=label,
                            min_value=0.0,
                            value=0.0,
                            step=1000.0,
                            format="%.2f",
                            help=help_text,
                            key=f"input_{var}"
                        )

        # C√°lculo de indicadores
        try:
            indicadores = calcular_indicadores(dados)
        except Exception as e:
            st.error(f"Erro no c√°lculo de indicadores: {str(e)}")
            st.stop()

        # Se√ß√£o de refer√™ncia e previs√£o
        exibir_referencia(df_referencia, indicadores)
        
        # Bot√£o de previs√£o
        if st.button("üéØ Executar Previs√£o", use_container_width=True):
            modelo = carregar_modelo()
            if modelo:
                try:
                    previsao = fazer_previsao(modelo, indicadores)
                    if previsao is not None:
                        st.success(f"**Resultado da Previs√£o:** {previsao[0]}")
                except Exception as e:
                    st.error(f"Erro na previs√£o: {str(e)}")

    with col2:
        # Exibi√ß√£o de indicadores
        if 'indicadores' in locals():
            exibir_indicadores(indicadores)
        else:
            st.warning("Preencha os dados na coluna esquerda para ver os indicadores")

def calcular_indicadores(dados):
    """Calcula todos os indicadores financeiros com nomes padronizados"""
    indicadores = {}
    
    # Verifica√ß√£o de valores zero para divis√£o segura
    populacao = dados["populacao"] if dados["populacao"] != 0 else 1
    
    # C√°lculos principais - padronizando os nomes
    indicadores["receita_per_capita"] = dados["receita_total"] / populacao
    indicadores["representatividade_da_receita_propria"] = dados["receita_propria"] / dados["receita_total"] if dados["receita_total"] != 0 else 0
    indicadores["participacao_das_receitas_de_transferencias"] = dados["receita_transferencias"] / dados["receita_total"] if dados["receita_total"] != 0 else 0
    indicadores["participacao_dos_gastos_operacionais"] = dados["gastos_operacionais"] / dados["despesa_total"] if dados["despesa_total"] != 0 else 0
    indicadores["cobertura_de_despesas"] = dados["receita_total"] / dados["despesa_total"] if dados["despesa_total"] != 0 else 0
    indicadores["recursos_para_cobertura_de_queda_de_arrecadacao"] = dados["disponibilidade_caixa"] / dados["receita_total"] if dados["receita_total"] != 0 else 0
    indicadores["recursos_para_cobertura_de_obrigacoes_de_curto_prazo"] = dados["disponibilidade_caixa"] / dados["obrigacoes_curto_prazo"] if dados["obrigacoes_curto_prazo"] != 0 else 0
    indicadores["comprometimento_das_receitas_correntes_com_as_obrigacoes_de_curto_prazo"] = dados["obrigacoes_curto_prazo"] / dados["receita_corrente_liquida"] if dados["receita_corrente_liquida"] != 0 else 0
    indicadores["divida_per_capita"] = dados["divida_consolidada"] / populacao
    indicadores["comprometimento_das_receitas_correntes_com_o_endividamento"] = dados["divida_consolidada"] / dados["receita_corrente_liquida"] if dados["receita_corrente_liquida"] != 0 else 0
    
    # Corrigindo os nomes problem√°ticos para o padr√£o snake_case:
    indicadores["despesa_com_pessoal"] = dados["despesa_com_pessoal"]  # Padronizado
    indicadores["divida_consolidada"] = dados["divida_consolidada"]  # Padronizado
    indicadores["operacoes_credito"] = dados["operacoes_credito"]  # Padronizado
    
    indicadores["poupanca_corrente"] = dados["receita_total"] - dados["despesa_total"]
    indicadores["liquidez_relativa"] = dados["obrigacoes_curto_prazo"] / dados["disponibilidade_caixa"] if dados["disponibilidade_caixa"] != 0 else 0
    indicadores["indicador_de_liquidez"] = dados["ativo_circulante"] / dados["obrigacoes_curto_prazo"] if dados["obrigacoes_curto_prazo"] != 0 else 0
    indicadores["endividamento"] = (dados["divida_consolidada"] + dados["operacoes_credito"]) / dados["receita_corrente_liquida"] if dados["receita_corrente_liquida"] != 0 else 0

    return indicadores

def exibir_indicadores(indicadores):
    """Exibe os indicadores com formata√ß√£o, alertas e f√≥rmulas de c√°lculo"""
    REGRAS_ALERTAS = {
        "receita_per_capita": {
            "mensagem": lambda v: "üî¥ Baixa receita per capita!" if v < 1000 else "üü¢ Receita per capita adequada.",
            "formula": "Receita Total / Popula√ß√£o"
        },
        "representatividade_da_receita_propria": {
            "mensagem": lambda v: "üî¥ Baixa depend√™ncia de receita pr√≥pria!" if v < 0.2 else "üü¢ Boa representatividade da receita pr√≥pria.",
            "formula": "Receita Pr√≥pria / Receita Total"
        },
        "participacao_das_receitas_de_transferencias": {
            "mensagem": lambda v: "üü° Alta depend√™ncia de transfer√™ncias." if v > 0.5 else "üü¢ N√≠vel equilibrado de transfer√™ncias.",
            "formula": "Receitas de Transfer√™ncias / Receita Total"
        },
        "participacao_dos_gastos_operacionais": {
            "mensagem": lambda v: "üü° Gastos operacionais elevados." if v > 0.6 else "üü¢ Gastos operacionais controlados.",
            "formula": "Gastos Operacionais / Despesa Total"
        },
        "cobertura_de_despesas": {
            "mensagem": lambda v: "üî¥ Receita insuficiente para cobrir despesas!" if v < 1 else "üü¢ Cobertura adequada das despesas.",
            "formula": "Receita Total / Despesa Total"
        },
        "recursos_para_cobertura_de_queda_de_arrecadacao": {
            "mensagem": lambda v: "üî¥ Pouca reserva de caixa!" if v < 0.05 else "üü¢ Reserva de caixa satisfat√≥ria.",
            "formula": "Disponibilidade de Caixa / Receita Total"
        },
        "recursos_para_cobertura_de_obrigacoes_de_curto_prazo": {
            "mensagem": lambda v: "üî¥ Risco de n√£o cumprir obriga√ß√µes imediatas!" if v < 1 else "üü¢ Cobertura adequada das obriga√ß√µes.",
            "formula": "Disponibilidade de Caixa / Obriga√ß√µes de Curto Prazo"
        },
        "comprometimento_das_receitas_correntes_com_as_obrigacoes_de_curto_prazo": {
            "mensagem": lambda v: "üî¥ Alto comprometimento com curto prazo!" if v > 0.5 else "üü¢ Comprometimento controlado.",
            "formula": "Obriga√ß√µes de Curto Prazo / Receita Corrente L√≠quida"
        },
        "divida_per_capita": {
            "mensagem": lambda v: "üü° D√≠vida per capita moderada." if v > 1000 else "üü¢ D√≠vida per capita sob controle.",
            "formula": "D√≠vida Consolidada / Popula√ß√£o"
        },
        "comprometimento_das_receitas_correntes_com_o_endividamento": {
            "mensagem": lambda v: "üî¥ Endividamento elevado!" if v > 1 else "üü¢ Endividamento aceit√°vel.",
            "formula": "D√≠vida Consolidada / Receita Corrente L√≠quida"
        },
        "despesa_com_pessoal": {
            "mensagem": lambda v: "üî¥ Muito alta!" if v > 0.6 * indicadores.get("receita_corrente_liquida", 1) else "üü¢ Dentro do limite",
            "formula": "Valor absoluto",
            "fiscal": lambda v, rcl: [
                ("üö® Viola√ß√£o LRF: >60% RCL", "red") if v/rcl >= 0.6 else None,
                ("‚ö†Ô∏è Alerta LRF: ‚â•54% RCL", "orange") if 0.54 <= v/rcl < 0.6 else None
            ]
        },
        "divida_consolidada": {
            "mensagem": lambda v: "üü° Elevada" if v > indicadores.get("receita_corrente_liquida", 1) else "üü¢ Controlada",
            "formula": "Valor absoluto",
            "fiscal": lambda v, rcl: [
                ("üö® Viola√ß√£o LRF: >1.2x RCL", "red") if v/rcl > 1.2 else None
            ]
        },
        "operacoes_credito": {
            "mensagem": lambda v: "üü° Opera√ß√µes de cr√©dito elevadas." if v > 0.3 * indicadores.get("receita_corrente_liquida", 1) else "üü¢ Opera√ß√µes de cr√©dito controladas.",
            "formula": "Valor absoluto das opera√ß√µes de cr√©dito"
        },
        "liquidez_relativa": {
            "mensagem": lambda v: "üî¥ Baixa liquidez relativa!" if v > 1 else "üü¢ Liquidez adequada.",
            "formula": "Obriga√ß√µes de Curto Prazo / Disponibilidade de Caixa"
        },
        "indicador_de_liquidez": {
            "mensagem": lambda v: "üü° Alta liquidez" if v > 1 else "üî¥ Baixa liquidez",
            "formula": "Ativo Circulante / Passivo",
            "fiscal": lambda v, _: [
                ("‚ö†Ô∏è CAPAG: Liquidez acima do ideal", "orange") if v > 1 else None
            ]
        },
        "endividamento": {
            "mensagem": lambda v: "üî¥ Muito elevado" if v > 1.6 else "‚ö†Ô∏è Elevado" if v > 1.2 else "üü¢ Controlado",
            "formula": "(D√≠vida + Cr√©ditos)/RCL",
            "fiscal": lambda v, rcl: [
                ("üö® CAPAG Categoria D", "red") if v > 1.6 else None,
                ("‚ö†Ô∏è CAPAG Categoria C", "orange") if 1.2 < v <= 1.6 else None
            ]
        },
        "poupanca_corrente": {
            "mensagem": lambda v: "üî¥ D√©ficit" if v < 0 else "üü¢ Super√°vit",
            "formula": "Receita - Despesa",
            "fiscal": lambda v, _: [
                ("‚ö†Ô∏è CAPAG: D√©ficit operacional", "orange") if v < 0 else None
            ]
        }
    }
    
    for nome, valor in indicadores.items():
        with st.container():
            cols = st.columns([3, 1, 4])
            cols[0].markdown(f"**{nome.replace('_', ' ').title()}**")
            cols[1].markdown(f"`{valor:.2f}`")
            
            if nome in REGRAS_ALERTAS:
                regras = REGRAS_ALERTAS[nome]
                alerta = regras["mensagem"](valor)
                formula = regras["formula"]
                
                # Alerta principal
                cor = 'red' if 'üî¥' in alerta else 'orange' if 'üü°' in alerta else 'green'
                cols[2].markdown(f"<span style='color:{cor}'>{alerta}</span>", unsafe_allow_html=True)
                
                # F√≥rmula e alertas fiscais
                st.markdown(f"<div style='font-size:12px; color:gray;'>F√≥rmula: {formula}</div>", 
                           unsafe_allow_html=True)
                
                # Verifica√ß√µes fiscais
                if "fiscal" in regras:
                    rcl = indicadores.get("receita_corrente_liquida", 1)
                    if rcl == 0:
                        st.markdown("<div style='font-size:12px; color:red;'>‚ö†Ô∏è RCL zero inv√°lida para c√°lculos</div>", 
                                   unsafe_allow_html=True)
                    else:
                        fiscal_messages = regras["fiscal"](valor, rcl)
                        for msg in fiscal_messages:
                            if msg:
                                st.markdown(f"<div style='font-size:12px; color:{msg[1]};'>{msg[0]}</div>", 
                                           unsafe_allow_html=True)
            st.divider()

def exibir_referencia(df_referencia, indicadores):
    """Exibe compara√ß√£o com dados hist√≥ricos"""
    with st.expander("üîç Compara√ß√£o com M√©dia 2022"):
        # Seleciona apenas colunas num√©ricas para c√°lculo da m√©dia
        df_numerico = df_referencia.select_dtypes(include=['number'])
        media_2022 = df_numerico.mean()
        
        for k, v in indicadores.items():
            if k in media_2022:
                ref = media_2022[k]
                if ref != 0:
                    diff = ((v - ref)/ref)*100
                    st.metric(
                        label=k.replace("_", " ").title(),
                        value=f"{v:.2f}",
                        delta=f"{diff:.1f}% vs 2022"
                    )
                else:
                    st.metric(
                        label=k.replace("_", " ").title(),
                        value=f"{v:.2f}",
                        delta="Sem refer√™ncia (divis√£o por zero)"
                    )
            else:
                st.metric(
                    label=k.replace("_", " ").title(),
                    value=f"{v:.2f}",
                    delta="Indicador n√£o encontrado nos dados de 2022"
                )
                


if __name__ == "__main__":
    main()
